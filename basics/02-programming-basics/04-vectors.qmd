---
title: "Vectores"
format:
  html: 
    toc: false
    section-divs: true
    include-after-body: 
      - text: |
          <script src="/js/progressive-reveal.js"></script>

engine: knitr
filters:
  - webr
webr:
  cell-options:
    editor-font-scale: 0.85
    fig-width: 6
    fig-height: 3.7
    out-width: "70%"
---

```{r include=FALSE}
source(here::here("R", "helpers.R"))
```

### Vectores {.no-hide}

Mira [este video](https://vimeo.com/220490316):

```{=html}
<div class="ratio ratio-4x3">
<iframe src="https://player.vimeo.com/video/220490316" frameborder="0" allow="autoplay; fullscreen; picture-in-picture" allowfullscreen></iframe>
</div>
```

[**Nota:** Puedes activar los subtítulos (en inglés) con el botón _CC_ (CC/Subtitles) o visualizar la transcripción del video con el botón _Transcript_.]{style="font-size:.8em;opacity:.6"}

### Crear un vector

En el fragmento de código de abajo, crea un vector que contenga los números enteros del uno al diez. Usa la función `c()`.

::: {.panel-tabset}
## {{< fa code >}}&ensp;Editor interactivo

```{webr-r}



```

## {{< fa circle-check >}}&ensp;Solución

```r
c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
```

:::


### `:`

Si tu vector contiene una secuencia de números contíguos, puedes crearlo con el operador `:`. Ejecuta `1:10` en el fragmento de código de debajo. ¿Qué obtienes? ¿Qué crees que devolvería `1:20`?

::: {.panel-tabset}
## {{< fa code >}}&ensp;Editor interactivo

```{webr-r}



```

## {{< fa circle-check >}}&ensp;Solución

```r
1:10
1:20
```

:::


### `[]`

Puedes extraer cualquier elemento de un vector colocando un par de corchetes después del vector. Dentro de los corchetes, coloca el número del elemento que quieres extraer. Por ejemplo, `vec[3]` devolvería el tercer elemento del vector con nombre `vec`.

Utiliza el fragmento de código de debajo para extraer el cuarto elemento de `vec`.

::: {.panel-tabset}
## {{< fa code >}}&ensp;Editor interactivo

```{webr-r}
vec <- c(1, 2, 4, 8, 16)


```

## {{< fa circle-check >}}&ensp;Solución

```r
vec <- c(1, 2, 4, 8, 16)
vec[4]
```

:::

### Más `[]`

También puedes usar `[]` para extraer múltiples elementos de un vector. Coloca el vector `c(1,2,5)` entre los corchetes aquí abajo. ¿Qué devuelve R?

::: {.panel-tabset}
## {{< fa code >}}&ensp;Editor interactivo

```{webr-r}
vec <- c(1, 2, 4, 8, 16)
vec[]


```

## {{< fa circle-check >}}&ensp;Solución

```r
vec <- c(1, 2, 4, 8, 16)
vec[c(1,2,5)]
```

:::


### Nombres

Si los elementos de tu vector contienen nombres, puedes extraerlos por su nombre. Para hacerlo así, escribe un nombre o vector de nombres entre corchetes después del vector. Rodea cada nombre de comillas, por ejemplo,  `vec2[c("alpha", "beta")]`.

Extrae el elemento llamado gamma del vector de debajo.

::: {.panel-tabset}
## {{< fa code >}}&ensp;Editor interactivo

```{webr-r}
vec2 <- c(alpha = 1, beta = 2, gamma = 3)


```

## {{< fa circle-check >}}&ensp;Solución

```r
vec2 <- c(alpha = 1, beta = 2, gamma = 3)
vec2["gamma"]
```

:::


### Operaciones vectorizadas

Predice lo que devolverá el código de debajo. Después mira el resultado.

::: {.panel-tabset}
## {{< fa code >}}&ensp;Editor interactivo

```{webr-r}
c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10) + c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)


```

:::

###

¡Buen trabajo! Como muchas funciones de R, los operadores matemáticos en R están _vectorizados_: están diseñados para funcionar con vectores mediante la repetición de la operación para cada par de elementos.

### Reciclaje de vectores

Predice lo que devolverá el código de debajo. Después mira el resultado.

::: {.panel-tabset}
## {{< fa code >}}&ensp;Editor interactivo

```{webr-r}
1 + c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)


```

:::

###

¡Buen trabajo! Cada vez que intentas trabajar con vectores de longitudes distintas (recuerda que `1` es un vector de longitud uno) R repetirá el vector más corto tantas veces como sea necesario para calcular el resultado.

##

```{r}
#| echo: false
#| results: asis
create_buttons("05-types.html")
```
