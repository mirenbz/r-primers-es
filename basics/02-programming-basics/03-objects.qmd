---
title: "Objetos"
format:
  html: 
    toc: false
    section-divs: true
    include-after-body: 
      - text: |
          <script src="/js/progressive-reveal.js"></script>
          <script src="/js/bootstrapify.js"></script>

engine: knitr
filters:
  - webr
webr:
  cell-options:
    editor-font-scale: 0.85
    fig-width: 6
    fig-height: 3.7
    out-width: "70%"
---

```{r include=FALSE}
source(here::here("R", "helpers.R"))
```

### Objetos {.no-hide}

Mira [este video](https://vimeo.com/220493412):

```{=html}
<div class="ratio ratio-4x3">
<iframe src="https://player.vimeo.com/video/220493412" frameborder="0" allow="autoplay; fullscreen; picture-in-picture" allowfullscreen></iframe>
</div>
```

[**Nota:** Puedes activar los subtítulos (en inglés) con el botón _CC_ (CC/Subtitles) o visualizar la transcripción del video con el botón _Transcript_.]{style="font-size:.8em;opacity:.6"}

### Nombres de objetos

Puedes elegir casi cualquier nombre que quieras para un objeto, siempre y cuando el nombre no empiece con un número o un carácter especial como `+`, `-`, `*`, `/`, `^`, `!`, `@` o `&`. 

Por ejemplo, revisa esta lista de algunos posibles nombres de objetos. Algunos se podrían utilizar, pero otros no son válidos:

- `hoy`: Este está bien
- `1ero`: Este está **mal**; empieza con un número
- `+1`: Este está **mal**; empieza con un carácter especial
- `vars`: Este está bien
- `\^_^`: Este está **mal**; empieza con un carácter especial
- `foo`: Este está bien


### Usar objetos

En el fragmento de código de abajo, guarda los resultados de `rnorm(100, mean = 100, sd = 15)` en un objeto llamado `datos`. Después, en una nueva línea, ejecuta la función `hist()` sobre `datos` para representar gráficamente un diagrama de los valores aleatorios.

::: {.panel-tabset}
## {{< fa code >}}&ensp;Editor interactivo

```{webr-r}



```

## {{< fa circle-check >}}&ensp;Solución

```r
datos <- rnorm(100, mean = 100, sd = 15)
hist(datos)
```

:::

### ¿Y si...?

¿Qué crees que pasaría si asignaras `datos` a un nuevo objeto llamado `copia`, así? Ejecuta el código y después inspecciona tanto `datos` como `copia`.

::: {.panel-tabset}
## {{< fa code >}}&ensp;Editor interactivo

```{webr-r}
datos <- rnorm(100, mean = 100, sd = 15)
copia <- datos


```

## {{< fa circle-check >}}&ensp;Solución

```r
datos <- rnorm(100, mean = 100, sd = 15)
copia <- datos
datos
copia
```

:::

###

¡Efectivamente! R guarda una copia de los contenidos de `datos` en `copia`.

### Conjuntos de datos

Los objetos ofrecen una manera sencilla de almacenar conjuntos de datos en R. De hecho, R viene con varios conjuntos de datos de prueba precargados. Examina el contenido de `mtcars` para ver un conjunto de datos de prueba clásico. Pista: ¿cómo harías para saber más acerca del objeto `mtcars`?

::: {.panel-tabset}
## {{< fa code >}}&ensp;Editor interactivo

```{webr-r}



```

## {{< fa circle-check >}}&ensp;Solución

```r
mtcars
```

:::

###

¡Eso es! Puedes saber aún más sobre `mtcars` examinando su página de ayuda con `?mtcars`.

### `rm()`

¿Qué pasa si sobreescribes un ojeto accidentalmente? Si ese objeto vino con R o alguno de sus paquetes, puedes restaurar la versión original del objeto borrándolo de tu entorno con `rm()`. Ejecuta `rm()` sobre `mtcars` abajo para restaurar el conjunto de datos `mtcars`.

::: {.panel-tabset}
## {{< fa code >}}&ensp;Editor interactivo

```{webr-r}
mtcars <- 1
mtcars


```

## {{< fa circle-check >}}&ensp;Solución

```r
mtcars <- 1
mtcars
rm(mtcars)
mtcars
```

:::

###

¡Bien hecho! Desafortunadamente, `rm()` no puede ayudarte si sobreescribes uno de tus propios objetos.

##

```{r}
#| echo: false
#| results: asis
create_buttons("04-vectors.html")
```
