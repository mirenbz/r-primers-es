---
title: "Listas"
format:
  html: 
    toc: false
    section-divs: true
    include-after-body: 
      - text: |
          <script src="/js/progressive-reveal.js"></script>
          <script src="/js/bootstrapify.js"></script>

engine: knitr
filters:
  - webr
webr:
  cell-options:
    editor-font-scale: 0.85
    fig-width: 6
    fig-height: 3.7
    out-width: "70%"
---

```{r include=FALSE}
library(tidyverse)
library(checkdown)

source(here::here("R", "helpers.R"))
```

### Listas {.no-hide}

Mira [este video](https://vimeo.com/220490360):

[**Nota:** Puedes activar los subtítulos (en inglés) con el botón _CC_ (CC/Subtitles) o visualizar la transcripción del video con el botón _Transcript_.]{style="font-size:.8em;opacity:.6"}

```{=html}
<div class="ratio ratio-4x3">
<iframe src="https://player.vimeo.com/video/220490360" frameborder="0" allow="autoplay; fullscreen; picture-in-picture" allowfullscreen></iframe>
</div>
```

### Listas vs. vectores

::: {.callout-note appearance="simple" icon=false .question}

**¿Qué estructura(s) de datos podrías usar para almacenar estos datos en el mismo objeto? `1001`, `TRUE`, `"historias"`**

```{r lists1, echo=FALSE}
check_question(
  answer = c("una lista"), 
  options = c(
   "un vector",
   "una lista",
   "ninguna"
  ), 
  type = "radio", 
  button_label = "Registrar respuesta", 
  q_id = 1,
  right = c("¡Correcto! Las listas pueden contener elementos que sean de diferentes tipos.")
)
```

:::


### Crea una lista

Crea una lista que contenga los elementos `1001`, `TRUE` e `"historias"`. Da un nombre a caa elemento.

::: {.panel-tabset}
## {{< fa code >}}&ensp;Editor interactivo

```{webr-r}



```

## {{< fa circle-check >}}&ensp;Solución

```r
list(number = 1001, logical = TRUE, string = "historias")
```

:::


### Extrae un elemento

Extrae el número 1001 de la lista de abajo.

::: {.panel-tabset}
## {{< fa code >}}&ensp;Editor interactivo

```{webr-r}
cosas <- list(numero = 1001, logico = TRUE, cadena = "historias")


```

## {{< fa circle-check >}}&ensp;Solución

```r
cosas <- list(numero = 1001, logico = TRUE, cadena = "historias")
cosas$numero
```

:::

### Marcos de datos

Puedes crear un marco de datos con la función `data.frame()`, que funciona de modo parecido a `c()`y `lists()`. Ensambla los vectores de debajo en un marco de datos con los nombres de columnas `num`, `logico` y `cadena`.

You can make a data frame with the `data.frame()` function, which works similar to `c()`, and `list()`. Assemble the vectors below into a data frame with the column names `numbers`, `logicals`, `strings`.

::: {.panel-tabset}
## {{< fa code >}}&ensp;Editor interactivo

```{webr-r}
nums <- c(1, 2, 3, 4)
logs <- c(TRUE, TRUE, FALSE, TRUE)
cads <- c("manazana", "platano", "zanahora", "pato")


```

## {{< fa circle-check >}}&ensp;Solución

```r
nums <- c(1, 2, 3, 4)
logs <- c(TRUE, TRUE, FALSE, TRUE)
cads <- c("manazana", "platano", "zanahora", "pato")
data.frame(numero = nums, logico = logs, cadena = strs)
```

:::

###

Bien hecho. Cuando creas un marco de datos, debes seguir una norma: cada columna de vector (cada vector, cada variable) debería ser de la misma longitud.


### Extrae una columna

Dado que el marco de datos es un tipo de lista (con elementos nombrados), ¿cómo podrías extraer la columna de cadenas de texto del marco de datos `df` de debajo? Hazlo.

::: {.panel-tabset}
## {{< fa code >}}&ensp;Editor interactivo

```{webr-r}
nums <- c(1, 2, 3, 4)
logs <- c(TRUE, TRUE, FALSE, TRUE)
cads <- c("manazana", "platano", "zanahora", "pato")
df <- data.frame(numero = nums, logico = logs, cadena = strs)


```

## {{< fa circle-check >}}&ensp;Solución

```r
df$cadena
```

:::

##

```{r}
#| echo: false
#| results: asis
create_buttons("07-packages.html")
```
