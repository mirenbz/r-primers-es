---
title: "Coordinate systems ⚠"
format:
  html: 
    toc: false
    section-divs: true
    include-after-body: 
      - text: |
          <script src="/js/progressive-reveal.js"></script>

engine: knitr
filters:
  - webr
webr:
  packages:
    - ggplot2
  cell-options:
    editor-font-scale: 0.85
    fig-width: 6
    fig-height: 3.7
    out-width: "70%"
---

```{r include=FALSE}
knitr::opts_chunk$set(
  fig.width = 6,
  fig.height = 6 * 0.618,
  fig.retina = 3,
  dev = "ragg_png",
  fig.align = "center",
  out.width = "70%"
)

library(tidyverse)
set.seed(1234)

source(here::here("R", "helpers.R"))
```

### `coord_flip()` {.no-hide}

One way to customize a scatterplot is to plot it in a new coordinate system. {ggplot2} provides several helper functions that change the coordinate system of a plot. You've already seen one of these in action in the [boxplots tutorial](/visualize-data/04-boxplots/): `coord_flip()` flips the $x$ and $y$ axes of a plot.

```{r out.width="80%", message=FALSE, warning=FALSE}
ggplot(data = mpg, mapping = aes(x = class, y = hwy)) +
  geom_boxplot(outlier.alpha = 0) +
  geom_jitter(width = 0) +
  coord_flip()
```

### The coord functions

Altogether, {ggplot2} comes with several `coord` functions:

* `coord_cartesian()`: (the default) Cartesian coordinates
* `coord_fixed()`: Cartesian coordinates that maintain a fixed aspect ratio as the plot window is resized
* `coord_flip()`: Cartesian coordinates with x and y axes flipped
* `coord_sf()`: cartographic projections for plotting maps
* `coord_polar()` and `coord_radial()`: polar and radial coordinates for round plots like pie charts
* `coord_trans()`: transformed Cartesian coordinates

By default, {ggplot2} will draw a plot in Cartesian coordinates unless you add one of the functions above to the plot code.

### `coord_polar()`

You use each coord function like you use `coord_flip()`, by adding it to a {ggplot2} call.

So for example, you could add `coord_polar()` to a plot to make a graph that uses polar coordinates.

```{r out.width="80%", message=FALSE, warning=FALSE}
ggplot(data = diamonds) +
  geom_bar(mapping = aes(x = cut, fill = cut), width = 1) 

last_plot() +
  coord_polar()
```

### Coordinate systems and scatterplots

How can a coordinate system improve a scatterplot? 

Consider, the scatterplot below. It shows a strong relationship between the carat size of a diamond and its price. 

```{r echo=FALSE, out.width="80%", message=FALSE, warning=FALSE}
ggplot(data = diamonds) +
  geom_point(mapping = aes(x = carat, y = price)) 
```

However, the relationship does not appear linear. It appears to have the form $y = x^{n}$, a common relationship found in nature. You can estimate the $n$ by replotting the data in a _log-log plot_.

### log-log plots

Log-log plots graph the log of $x$ vs. the log of $y$, which has a valuable visual effect. If you log both sides of a relationship like

$$
y = x^{n}
$$

You get a linear relationship with slope $n$:

$$
\begin{aligned}
\log(y) &= \log(x^{n}) \\
\log(y) &= n \times \log(x)
\end{aligned}
$$

In other words, log-log plots unbend power relationships into straight lines. Moreover, they display $n$ as the slope of the straight line, which is reasonably easy to estimate.

Try this by using the diamonds dataset to plot `log(carat)` on the x-axis and `log(price)` on the y-axis:

::: {.panel-tabset}
## {{< fa code >}}&ensp;Editor interactivo

```{webr-r}



```

## {{< fa circle-check >}}&ensp;Solución

```r
ggplot(data = diamonds) +
  geom_point(mapping = aes(x = log(carat), y = log(price))) 
```

:::

###

Good job! Now let's look at how you can do the same transformation, and others as well with a coord function.

### `coord_trans()`

`coord_trans()` provides a second way to do the same transformation, or similar transformations.

To use `coord_trans()` give it an $x$ and/or a $y$ argument. Set each to the name of an R function surrounded by quotation marks. `coord_trans()` will use the function to transform the specified axis before plotting the raw data. 

::: {.panel-tabset}
## {{< fa code >}}&ensp;Editor interactivo

```{webr-r}
ggplot(data = diamonds) +
  geom_point(mapping = aes(x = carat, y = price)) +
  coord_trans(x = "log", y = "log")


```

:::


### Recap

Scatterplots are one of the most useful types of plots for data science. You will have many chances to use `geom_point()`, `geom_smooth()`, and `geom_label_repel()` in your day-to-day work.

However, this tutor introduced important two concepts that apply to more than just scatterplots:

* You can add **multiple layers** to any plot that you make with {ggplot2}
* You can add a different **coordinate system** to any plot that you make with {ggplot2}


##

```{r}
#| echo: false
#| results: asis
create_buttons(NULL)
```
