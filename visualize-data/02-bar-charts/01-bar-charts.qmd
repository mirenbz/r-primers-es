---
title: "Bar charts ⚠"
format:
  html: 
    toc: false
    section-divs: true
    include-after-body: 
      - text: |
          <script src="/js/progressive-reveal.js"></script>
          <script src="/js/bootstrapify.js"></script>

engine: knitr
filters:
  - webr
webr:
  packages:
    - ggplot2
    - dplyr
  cell-options:
    editor-font-scale: 0.85
    fig-width: 6
    fig-height: 3.7
    out-width: "70%"
---

```{r include=FALSE}
knitr::opts_chunk$set(
  fig.width = 6,
  fig.height = 6 * 0.618,
  fig.retina = 3,
  dev = "ragg_png",
  fig.align = "center",
  out.width = "70%"
)

library(tidyverse)
library(checkdown)

source(here::here("R", "helpers.R"))
```

### How to make a bar chart {.no-hide}

To make a bar chart with {ggplot2}, add `geom_bar()` to the [ggplot2 template](/basics/01-visualization-basics/01-code-template.qmd). For example, the code below plots a bar chart of the `cut` variable in the `diamonds` dataset, which comes with {ggplot2}.

```{r out.width="80%"}
ggplot(data = diamonds) +
  geom_bar(mapping = aes(x = cut))
```

### The y axis

You should not supply a $y$ aesthetic when you use `geom_bar()`; {ggplot2} will count how many times each $x$ value appears in the data, and then display the counts on the $y$ axis. So, for example, the plot above shows that over 20,000 diamonds in the data set had a value of `Ideal`.

You can compute this information manually with the `count()` function from the {dplyr} package.

```{r}
diamonds |> 
  count(cut)
```

### `geom_col()`

Sometimes, you may want to map the heights of the bars not to counts, but to a variable in the data set. To do this, use `geom_col()`, which is short for column. 

```{r out.width="80%"}
ggplot(data = pressure) +
  geom_col(mapping = aes(x = temperature, y = pressure))
```

### `geom_col()` data

When you use `geom_col()`, your $x$ and $y$ values should have a one to one relationship, as they do in the `pressure` data set (i.e. each value of `temperature` is paired with a single value of `pressure`).

```{r}
pressure
```

### Exercise 1: Make a bar chart

Use the code chunk below to plot the distribution of the `color` variable in the `diamonds` data set, which comes in the {ggplot2} package.

::: {.panel-tabset}
## {{< fa code >}}&ensp;Editor interactivo

```{webr-r}



```

## {{< fa circle-check >}}&ensp;Solución

```r
ggplot(data = diamonds) +
  geom_bar(mapping = aes(x = color))
```

:::


### Exercise 2: Interpretation

```{r out.width="80%", echo=FALSE}
ggplot(data = diamonds) +
  geom_bar(mapping = aes(x = cut)) + 
  labs(title = "Distribution of diamond cuts")
```

::: {.callout-note appearance="simple" icon=false .question}

**What is the most common type of cut in the `diamonds` dataset?**

```{r echo=FALSE}
check_question(
  answer = "Ideal", 
  options = c(
    "Fair",
    "Good",
    "Very Good",
    "Premium",
    "Ideal"
  ), 
  type = "radio", 
  button_label = "Registrar respuesta", 
  q_id = 1,
  right = c("Correct!")
)
```
:::

::: {.callout-note appearance="simple" icon=false .question}

**How many diamonds in the dataset had a `Good` cut?**

```{r echo=FALSE}
check_question(
  answer = "≈5000", 
  options = c(
    "≈2000",
    "≈5000",
    "≈7000",
    "≈20000"
  ), 
  type = "radio", 
  button_label = "Registrar respuesta", 
  q_id = 2,
  right = c("Correct!")
)
```
:::


### Exercise 3: What went wrong?

Diagnose the error below and then fix the code chunk to make a plot.

::: {.panel-tabset}
## {{< fa code >}}&ensp;Editor interactivo

```{webr-r}
ggplot(data = pressure) +
  geom_bar(mapping = aes(x = temperature, y = pressure))


```

## {{< fa circle-check >}}&ensp;Solución

```r
ggplot(data = pressure) +
  geom_col(mapping = aes(x = temperature, y = pressure))
```

:::


### Exercise 4: `count()` and `geom_col()`

Recreate the bar graph of `color` from exercise one, but this time first use `count()` to manually compute the heights of the bars. Then use `geom_col()` to plot the results as a bar graph. Does your graph look the same as in exercise one?

::: {.panel-tabset}
## {{< fa code >}}&ensp;Editor interactivo

```{webr-r}



```

## {{< fa circle-check >}}&ensp;Solución

```r
diamonds |> 
  count(color) |> 
  ggplot() +
    geom_col(mapping = aes(x = color, y = n))
```

:::


##

```{r}
#| echo: false
#| results: asis
create_buttons("02-aesthetics.html")
```
